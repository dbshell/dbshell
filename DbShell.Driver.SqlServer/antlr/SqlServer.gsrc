grammar SqlServer;

options {
	language=CSharp2;
	output=AST;
}

@header {
    using System.Globalization;
    using DbShell.Driver.Common.Utility;
}

find_deps[DepsCollector dc]
    : find_dep_item[dc]*;
find_dep_item[DepsCollector dc]
    : keyword | operator_no_dot | T_NSTRING | T_STRING | T_INTEGER | T_FLOAT | T_BINARYNUM | T_BLOB |
        name1=id { var name=new DepsName();name.AddComponent(UnquoteName($name1.text)); } 
        (DOT DOT? (name2=id { name.AddComponent(UnquoteName($name2.text));} | ASTERISK)  )*
        {dc.AddName(name); } ;

id: T_IDENT | T_QUOTED_IDENT;

// ****************************************************************************
// LEXER definitions
// ****************************************************************************
EQUALS:        '=';
SAFEEQUALS:    '<=>';
EQUALS2:       '==';
NOT_EQUALS:    '!=';
NOT_EQUALS2:   '<>';
LESS:          '<';
LESS_OR_EQ:    '<=';
GREATER:       '>';
GREATER_OR_EQ: '>=';
SHIFT_LEFT:    '<<';
SHIFT_RIGHT:   '>>';
AMPERSAND:     '&';
DOUBLE_AMPERSAND: '&&';
PIPE:          '|';
DOUBLE_PIPE:   '||';
PLUS:          '+';
MINUS:         '-';
TILDA:         '~';
ASTERISK:      '*';
SLASH:         '/';
PERCENT:       '%';
SEMI:          ';';
DOT:           '.';
COMMA:         ',';
LPAREN:        '(';
RPAREN:        ')';
QUESTION:      '?';
EXCLAMATION:   '!';
COLON:         ':';
AT:            '@';
DOLLAR:        '$';
ARROW_UP:      '^';

operator_no_dot :
    EQUALS | SAFEEQUALS | EQUALS2 | NOT_EQUALS | NOT_EQUALS2 | LESS | LESS_OR_EQ
    | GREATER | GREATER_OR_EQ | SHIFT_LEFT | SHIFT_RIGHT | AMPERSAND | DOUBLE_AMPERSAND
    | PIPE | DOUBLE_PIPE | PLUS | MINUS | TILDA | ASTERISK | SLASH | PERCENT | SEMI
    | COMMA | LPAREN | RPAREN | QUESTION | EXCLAMATION | COLON | AT | DOLLAR
    | ARROW_UP;

any_operator: DOT | operator_no_dot; 

// http://www.antlr.org/wiki/pages/viewpage.action?pageId=1782
fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');


#keywords
ADD
ALTER
AND
AS
ASC
BEGIN
BETWEEN
BY
CASCADE
CASE
CAST
CHECK
COLLATE
COLUMN
COMMIT
CONFLICT
CONSTRAINT
CREATE
CROSS
CURRENT_TIME
CURRENT_DATE
CURRENT_TIMESTAMP
UTC_TIMESTAMP
DATABASE
DEFAULT
DELETE
DESC
DISTINCT
DROP
ELSE
END
ESCAPE
EXCEPT
EXCLUSIVE
EXISTS
EXPLAIN
FOR
FOREIGN
FROM
GROUP
HAVING
IF
IN
INDEX
INNER
INSERT
INTERSECT
INTO
IS
JOIN
KEY
LEFT
LIKE
NOT
NULL
OF
ON
OR
ORDER
OUTER
PRIMARY
REFERENCES
ROLLBACK
SELECT
SET
TABLE
TEMPORARY
TEMP
THEN
TO
TRANSACTION
TRIGGER
UNION
UNIQUE
UPDATE
VALUES
VIEW
WHEN
WHERE
WITH
PARSER
XOR
#end

fragment ID_START: ('a'..'z'|'A'..'Z'|'_');
T_IDENT: (ID_START (ID_START|'0'..'9')*);
T_QUOTED_IDENT: '[' ( options {greedy=false;} : . )* ']';

T_NSTRING: 
	('N' | 'n') 
	  ('\'' 
	  	( 
	  		  options{greedy=true;}: ~('\'' | '\r' | '\n' ) | '\'' '\'' 
	  	)* 
	  '\'' )
;
T_STRING:
	  ('\'' 
	  	( 
	  		  options{greedy=true;}: ~('\'' | '\r' | '\n' ) | '\'' '\'' 
	  	)* 
	  '\'' )
;
T_INTEGER: ('0'..'9')+;
fragment FLOAT_EXP : ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
T_FLOAT
    :   ('0'..'9')+ '.' ('0'..'9')* FLOAT_EXP?
    |   '.' ('0'..'9')+ FLOAT_EXP?
    |   ('0'..'9')+ FLOAT_EXP
    ;
T_BLOB: ('x'|'X') '\'' ('0'..'9'|'a'..'f'|'A'..'F')+ '\'';

T_BINARYNUM : ('0' 'b' ('0' | '1')+ ) | 'b' '\'' ('0' | '1')+ '\'';

fragment T_COMMENT: '/*' ( options {greedy=false;} : . )* '*/';
fragment LINE_COMMENT: '--' ~('\n'|'\r')* ('\r'? '\n'|EOF);

WHITESPACE: (' '|'\r'|'\t'|'\u000C'|'\n'|T_COMMENT|LINE_COMMENT) {$channel=HIDDEN;};

